name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
      - test
      - 'feature/**'
      - 'feat/**'
      - 'bugfix/**'
      - 'hotfix/**'
  pull_request:
    branches:
      - main
      - dev
      - test
      - 'feature/**'
      - 'feat/**'
      - 'bugfix/**'
      - 'hotfix/**'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build project
        run: ./gradlew assemble --info

  Checkstyle:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: 17
          distribution: 'corretto'
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Run Checkstyle Main
        run: ./gradlew checkstyleMain
      - name: Run Checkstyle Test
        run: ./gradlew checkstyleTest

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'corretto'
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Run tests
        run: ./gradlew test --info

  sonar:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: test

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar-${{ github.sha }}
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Gradle packages
        uses: actions/cache@v1
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build the project
        run: ./gradlew build
      - name: List class files
        run: find build/classes -name "*.class"
      - name: Print build directory
        run: ls -R build
      - name: SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonar --info
      - name: Check SonarCloud Quality Gate
        run: |
          PROJECT_KEY="${{ secrets.SONAR_PROJECT_KEY }}"
          BRANCH_NAME="${GITHUB_REF#refs/heads/}" 
          STATUS=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" "https://sonarcloud.io/api/qualitygates/project_status?projectKey=${PROJECT_KEY}&branch=${BRANCH_NAME}")
          
          STATUS_VALUE=$(echo "$STATUS" | jq -r '.projectStatus.status')
          if [[ "$STATUS_VALUE" != "OK" ]]; then
            echo "SonarCloud analysis failed! Status: $STATUS_VALUE"
            echo "Conditions failed:"
            echo "$STATUS" | jq -r '.projectStatus.conditions[] | "Metric: \(.metricKey), Status: \(.status), Actual Value: \(.actualValue), Limit: \(.errorThreshold)"'
            exit 1
          else
            echo "SonarCloud analysis sucess."
          fi
