plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id "org.sonarqube" version "5.1.0.4882"
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'jacoco'
	id 'checkstyle'
}

group = 'com.db'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('snippetsDir', file("build/generated-snippets"))
}

checkstyle {
	toolVersion = '10.18.1'
	ignoreFailures = false
	configFile rootProject.file('checkstyle.xml')

}

tasks.withType(Checkstyle) {
	reports {
		xml.required = false
		html.required = true
		resources.text.fromFile("build/reports/checkstyle/checkstyle.html")
	}
}

configurations.checkstyle {
	resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
		select("com.google.guava:guava:0")
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'com.h2database:h2:2.1.214'
	testImplementation 'org.postgresql:postgresql:42.7.2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.mapstruct:mapstruct:1.5.5.Final'
  	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.5.0'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.slf4j:slf4j-api:2.0.16'
}

tasks.named('test') {
	useJUnitPlatform()
}

sonar {
	properties {
		property "sonar.projectKey", "TheBookClubDB_TheBookClub-Back"
		property "sonar.organization", "thebookclubdb"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.java.binaries", "${project.buildDir}/classes"
		property "sonar.jacoco.reportPath", "build/reports/jacoco/test/jacocoTestReport.xml"
		property "sonar.checkstyle.reportPath", "build/reports/checkstyle/main.html"
	}
}

tasks.named('asciidoctor') {
	inputs.dir snippetsDir
	dependsOn test
}

jacoco {
	toolVersion = '0.8.8'
}

tasks.named('test') {
	finalizedBy tasks.named('jacocoTestReport')
}

tasks.named('jacocoTestReport', JacocoReport) {
	dependsOn tasks.named('test')

	reports {
		xml.required.set(true)
		html.required.set(true)
	}

	sourceSets(sourceSets.main)
	executionData.setFrom(fileTree(dir: layout.buildDirectory.asFile, includes: ['jacoco/test.exec']))
}

tasks.named('check') {
	dependsOn tasks.named('jacocoTestCoverageVerification')
}

tasks.named('jacocoTestCoverageVerification', JacocoCoverageVerification) {
	violationRules {
		rule {
			limit {
				minimum = 0.70
			}
		}
	}
}
